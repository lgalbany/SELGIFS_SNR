#!/usr/bin/python

import numpy as np
import pyfits
import matplotlib.pyplot as plt
import pystarlight.io.starlighttable
import pystarlight
import atpy

from astropy.io import fits
from matplotlib.colors import LogNorm
from mpl_toolkits.mplot3d import Axes3D         # Cargo Axes3D de mpl_toolkits.mplot3d

from scipy.misc import imread                   # Cargo imread de scipy.misc
from matplotlib import cm
from astropy.utils.data import download_file
from astropy.constants import L_sun

from astropy.modeling import models, fitting

#Galbany project
from scipy.optimize import curve_fit
from scipy.stats import norm
import matplotlib.mlab as mlab

#Parte de CALIFA (Comun para Javi y Lluis)
califa_cube = pyfits.open('NGC2906.V500.rscube.fits')
califa_cube.info()
flux = califa_cube[0].data
#Defino posicion espacial mxn
m = 34; #Range from 0 to 77
n = 48; #Range from 0 to 71
#Saca el espectro en ese spaxel
spect1 = flux[:,n,m] #Remember (F,y,x)
#Checkpoint1
print "Longitud del vector flujo (check point): "
print len(spect1)
#Salto entre dato y dato en wavelength
salto = (7501.0-3749.0)/len(spect1)
#Limites en la longitud de onda (sacado de la web de CALIFA)
lamb0 = 3749.0
lambf = 7501.0
lamb = np.linspace(lamb0, lambf, len(spect1)) #Defino vector en ese tramo
#Primer plot, espectro entero
fig1=plt.figure(num=1,figsize=(8,5))
plt.plot(lamb, spect1, label='Spectra')
plt.xlabel('Wavelength')
plt.ylabel('Flux')
plt.title('NGC 2906')
plt.legend(loc=2)
plt.savefig('NGC2906spectra')
fig1.show()
plt.close()

#Ventana de datos para ajustar linea - Necesito algo generico para cuidar la cinematica
lamb00 = 3749 #Posicion 0 en el array tiene esta longitud de onda
P = 1400
Pini = P - 30
Pfin = P + 30
#Saco el flujo y la longitud de onda
spect1max= spect1[Pini:Pfin] #Vector de flujo en ventana
#print spect1max
#Posicion de la linea de Halpha en este (mxn)
PK = np.argmax(spect1max) #Posicion del maximo en la ventana, le sumo Pini
P0 = PK + Pini + 1 #Posicion del maximo en el espectro
#print P0
#Espero que sea siempre la linea de H alfa..........
if spect1max[PK]<0.2: 
	P0 = Pini + 1
#print "Posicion de la linea de H alpha"
#print P0
#global x0 
x0 = P0*salto + lamb00 + 2 #El 2 es porque la posicion 1 es 0 y se me pierde un 1 en P0, al multiplicar por salto es un 2.
#Posicion de la linea de Halpha en este (mxn)

#Ventana de datos para ajustar H alpha y cercanias xD
Pini1 = P0 - 6
Pfin1 = P0 + 6

#Saco la longitud de onda y el flujo
spect1v1= spect1[Pini1:Pfin1]

lamb0v1 = Pini1*salto + lamb00
lambfv1 = Pfin1*salto + lamb00
difv1 = Pfin1-Pini1 #Ventana espectro
lambv1 = np.linspace(lamb0v1, lambfv1, num=difv1)

print "Ventana considerada para Halpha"
print Pini1*salto + lamb00
print Pfin1*salto + lamb00

print "Parametros int para Halpha"
print lamb0v1
print lambfv1

print "Checking con la ventana del espectro"
a1 = (lamb0v1-lamb00)/salto
b1 = (lambfv1-lamb00)/salto
print a1
print b1

print "Separacion en datos"
print difv1

print "Arrays para plots"
print len(lambv1)
print len(spect1v1)

fig2=plt.figure(num=2,figsize=(8,5))
plt.plot(lambv1, spect1v1, label='Spectra')
plt.xlabel('Wavelength')
plt.ylabel('Flux')
plt.title('NGC 2906 (Ha window)')
plt.legend(loc=2)
plt.savefig('NGC2906spectraHa')
fig1.show()
fig2.show()
plt.close()

#Funcion de ajuste para la linea de H alfa

def gaussiana(x, A, B, C):
    """Modelo para nuestros datos."""
    return A * np.exp(-(x-x0)**2/(2.0*B)) + C


(A, B, C), pcov = curve_fit(gaussiana, lambv1, spect1v1)

print "Parametros del fit"
print(A, B, C)
print pcov
perr = np.sqrt(np.diag(pcov)) # one standard deviation errors on the parameters
print perr

ajuste= A * np.exp(-(lambv1-6607)** 2/(2.0*B)) + C

fig3=plt.figure(num=3,figsize=(8,5))
plt.plot(lambv1, spect1v1, label='Spectra')
plt.plot(lambv1, ajuste, label='Gaussian')
#plt.plot(gaussiana(lambv1,6606,1.0,1.0,0.23))
plt.xlabel('Wavelength')
plt.ylabel('Flux')
plt.title('NGC 2906 (Ha fitting)')
plt.legend(loc=2)
plt.savefig('NGC2906spectraHaGaussiana1')
fig1.show()
fig2.show()
fig3.show()
plt.close()

#Calculamos el EW de la linea de Halpha
EW = (1-C/(A+C))*np.sqrt(2*np.pi*B)
print "EW Halpha"
print EW

#Ajusto las 3 gaussianas
#Ventana de datos para ajustar las 3 lineas
Pini2 = P0 - 20
Pfin2 = P0 + 25
spect1v2= spect1[Pini2:Pfin2]

#x0 = 6607

lamb0v2 = Pini2*salto + lamb00
lambfv2 = Pfin2*salto + lamb00
difv2 = Pfin2-Pini2 #Ventana espectro
#lambv1 = lamb[lamb0v1:lambfv1]
lambv2 = np.linspace(lamb0v2, lambfv2, num=difv2)

#print (x0 - lamb00)/salto
#print "Ventana considerada para Halpha y los N"

#print Pini2
#print Pfin2

#print "Parametros int para Halpha y Ns"
#print lamb0v2
#print lambfv2
#lamb0v1 - lamb0 = 2833
#print "Checking con la ventana del espectro"
#a2 = (lamb0v2-lamb00)/salto
#b2 = (lambfv2-lamb00)/salto
#print a2
#print b2

#print "Separacion en datos"
#print difv2

#print "Arrays para plots"
#print len(lambv2)
#print len(spect1v2)

fig4=plt.figure(num=4,figsize=(8,5))
plt.plot(lambv2, spect1v2, label='Spectra')
plt.xlabel('Wavelength')
plt.ylabel('Flux')
plt.title('NGC 2906 (Ventana Ha-N)')
plt.legend(loc=2)
plt.savefig('NGC2906spectraHaN')
fig1.show()
fig2.show()
fig3.show()
fig4.show()
plt.close()

def gauss3(x, A1, B1, A2, B2, A3, B3, C2):
    """Modelo para nuestros datos."""
    return A1 * np.exp(-(x-x0)**2/(2.0*B1)) + A2 * np.exp(-(x-(x0-15))**2/(2.0*B2)) + A3 * np.exp(-(x-(x0+21))**2/(2.0*B3)) + C2


param_bounds1=([0,0,0,0,0,0,-np.inf],[np.inf,np.inf,np.inf,np.inf,np.inf,np.inf,np.inf])


(A1, B1, A2, B2, A3, B3, C2), pcov = curve_fit(gauss3, lambv2, spect1v2, bounds=param_bounds1)

print "Parametros del fit"
print (A1, B1, A2, B2, A3, B3, C2)

ajA=A1 * np.exp(-(lambv2-x0)**2/(2.0*B1))
ajB=A2 * np.exp(-(lambv2-(x0-15))**2/(2.0*B2))
ajC=A3 * np.exp(-(lambv2-(x0+21))**2/(2.0*B3))
ajuste2= ajA + ajB + ajC + C2

#fitting = gauss3(lambv2, A1, B1, C2, A2, B2, A3, B3) #Al final no hizo falta

fig5=plt.figure(num=5,figsize=(8,5))
plt.plot(lambv2, spect1v2, label='Spectra')
plt.plot(lambv2, ajuste2, label='Gaussian')
#plt.plot(gaussiana(lambv1,6606,1.0,1.0,0.23))
plt.xlabel('Wavelength')
plt.ylabel('Flux')
plt.title('NGC 2906 (Ha-N fitting)')
plt.legend(loc=2)
plt.savefig('NGC2906spectraHaNGaussiana3')
fig1.show()
fig2.show()
fig3.show()
fig4.show()
fig5.show()
plt.close()

#Calculamos el EW de la linea de Halpha
EW1 = (1-C2/(A1+C2))*np.sqrt(2*np.pi*B1)
EW2 = (1-C2/(A2+C2))*np.sqrt(2*np.pi*B2)
EW3 = (1-C2/(A3+C2))*np.sqrt(2*np.pi*B3)
print "EW1 of Halpha"
print EW1
print "EW2 of Nleft"
print EW2
print "EW3 of Nright"
print EW3


#Ajusto las 4 gaussianas
#Ventana de datos para ajustar las 3 lineas
Pini4 = P0 - 25
Pfin4 = P0 + 30
spect1v4= spect1[Pini4:Pfin4]

#x0 = 6607

lamb0v4 = Pini4*salto + lamb00
lambfv4 = Pfin4*salto + lamb00
difv4 = Pfin4-Pini4 #Ventana espectro
#lambv1 = lamb[lamb0v1:lambfv1]
lambv4 = np.linspace(lamb0v4, lambfv4, num=difv4)

print (x0 - lamb00)/salto
print "Ventana considerada para Halpha y los N"

print Pini4
print Pfin4

print "Parametros int para Halpha y Ns"
print lamb0v4
print lambfv4
#lamb0v1 - lamb0 = 2833
print "Checking con la ventana del espectro"
a4 = (lamb0v4-lamb00)/salto
b4 = (lambfv4-lamb00)/salto
print a4
print b4

print "Separacion en datos"
print difv4

print "Arrays para plots"
print len(lambv4)
print len(spect1v4)

fig6=plt.figure(num=6,figsize=(8,5))
plt.plot(lambv4, spect1v4, label='Spectra')
plt.xlabel('Wavelength')
plt.ylabel('Flux')
plt.title('NGC 2906 (Ventana Ha-N 4 gauss)')
plt.legend(loc=2)
plt.savefig('NGC2906spectraHaN4')
fig1.show()
fig2.show()
fig3.show()
fig4.show()
fig5.show()
fig6.show()
plt.close()

def gauss4(x, A1, B1, A2, B2, A3, B3, A4, B4, C4):
    """Modelo para nuestros datos."""
    return A1 * np.exp(-(x-x0)**2/(2.0*B1)) + A2 * np.exp(-(x-(x0-15))**2/(2.0*B2)) + A3 * np.exp(-(x-(x0+21))**2/(2.0*B3)) + A4 * np.exp(-(x-(x0-7))**2/(2.0*B4)) + C4


param_bounds=([0,0,0,0,0,0,0,120.0,-np.inf],[100,1000,100,1000,100,1000,100,10000,np.inf])

(A1, B1, A2, B2, A3, B3, A4, B4, C4), pcov = curve_fit(gauss4, lambv4, spect1v4,bounds=param_bounds)

print "Parametros del fit"
print (A1, B1, A2, B2, A3, B3, A4, B4, C4)

ajA4=A1 * np.exp(-(lambv4-x0)**2/(2.0*B1))
ajB4=A2 * np.exp(-(lambv4-(x0-15))**2/(2.0*B2))
ajC4=A3 * np.exp(-(lambv4-(x0+21))**2/(2.0*B3))
ajD4=A4 * np.exp(-(lambv4-(x0-7))**2/(2.0*B4))
ajuste4= ajA4 + ajB4 + ajC4 + ajD4 + C4

print "Arrays para plots de ajuste"
print len(lambv4)
print len(ajuste4)

if A4>=A3:
	print "There is SN emission."
	print "Position: ( m , n )=(",m,",",n,")"	
else:
	print "I am not sure if there is SN emission. Probably not."
	print "Position: ( m , n )=(",m,",",n,")"

fig7=plt.figure(num=7,figsize=(8,5))
plt.plot(lambv4, spect1v4, label='Spectra')
plt.plot(lambv4, ajuste4, label='Gaussian')
#plt.plot(gaussiana(lambv1,6606,1.0,1.0,0.23))
plt.xlabel('Wavelength')
plt.ylabel('Flux')
plt.title('NGC 2906 (Ha-N fitting 4 Gaussians)')
plt.legend(loc=2)
plt.savefig('NGC2906spectraHaNGaussiana4')
fig1.show()
fig2.show()
fig3.show()
fig4.show()
fig5.show()
fig6.show()
plt.show()
plt.close()

