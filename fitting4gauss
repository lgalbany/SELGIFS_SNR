#!/usr/local/bin/Ureka/variants/common/bin/python

import numpy as np
import pyfits
import matplotlib.pyplot as plt
import pystarlight.io.starlighttable
import pystarlight
import atpy
import matplotlib.mlab as mlab
from astropy.io import fits
from scipy.misc import imread # Cargo imread de scipy.misc
from matplotlib import cm
from astropy.utils.data import download_file
from astropy.constants import L_sun
from astropy.modeling import models, fitting
from scipy.optimize import curve_fit
from scipy.stats import norm
#SN identification. Col. Lluis Galbany
#Parte de CALIFA (Comun para Javi y Lluis)
#Cargamos datos.
#califa_cube = pyfits.open('NGC2906.V500.rscube.fits')
#califa_cube.info()
#flux = califa_cube[0].data #Nos quedamos con el PRIMARY
#Defino posicion espacial mxn
#m = 34; #Range from 0 to 77
#n = 47; #Range from 0 to 71

#Funcion de ajuste para la linea de H alfa
def gaussiana(x, A, B, C):
    """Modelo para nuestros datos."""
    return A * np.exp(-(x-x0)**2/(2.0*B)) + C


def gauss4(x, A1, B1, A2, B2, A3, B3, A4, B4, C4):
    """Modelo para nuestros datos."""
    return A1 * np.exp(-(x-x0)**2/(2.0*B1)) + A2 * np.exp(-(x-(x0-15))**2/(2.0*B2)) + A3 * np.exp(-(x-(x0+21))**2/(2.0*B3)) + A4 * np.exp(-(x-(x0-7))**2/(2.0*B4)) + C4



def fitting4gauss(flux,m,n):
	#Saca el espectro en ese spaxel
	spect1 = flux[:,n,m] #Remember (F,y,x)
	#Checkpoint1
	print "Longitud del vector flujo (check point): "
	print len(spect1)
	#Salto entre dato y dato en wavelength
	salto = (7501.0-3749.0)/len(spect1)
	#Limites en la longitud de onda (sacado de la web de CALIFA) Angstroms
	lamb0 = 3749.0
	lambf = 7501.0
	lamb = np.linspace(lamb0, lambf, len(spect1)) #Defino vector en ese tramo

	#Ventana de datos para ajustar linea - Necesito algo generico para cuidar la cinematica
	lamb00 = 3749 #Posicion 0 en el array tiene esta longitud de onda

	#Posicion de la linea de Halpha en este (mxn)
	P0 = np.argmax(spect1) #Posicion del maximo del espectro,
	#Espero que sea siempre la linea de H alfa..........
	print "Posicion de la linea de H alpha"
	print P0
	x0 = P0*salto + lamb00 + 2 #El 2 es porque la posicion 1 es 0 y se me pierde un 1 en P0, al multiplicar por salto es un 2.
	print x0
	#Luego hare que se modifique con la dinamica. Seguimos:

	#Ventana de datos para ajustar H alpha y cercanias.
	Pini1 = P0 - 6
	Pfin1 = P0 + 6

	#Saco el flujo y la longitud de onda
	spect1v1= spect1[Pini1:Pfin1] #Vector de flujo en ventana
	lamb0v1 = Pini1*salto + lamb00
	lambfv1 = Pfin1*salto + lamb00
	difv1 = Pfin1-Pini1 #Ventana espectro
	lambv1 = np.linspace(lamb0v1, lambfv1, num=difv1)

	print "Ventana considerada para Halpha"
	print Pini1*salto + lamb00
	print Pfin1*salto + lamb00

	(A, B, C), pcov = curve_fit(gaussiana, lambv1, spect1v1)

	print "Parametros del fit"
	print(A, B, C)
	#print pcov
	#perr = np.sqrt(np.diag(pcov)) # one standard deviation errors on the parameters
	#print perr

	#Calculamos el EW de la linea de Halpha
	EW = (1-C/(A+C))*np.sqrt(2*np.pi*B)
	print "EW Halpha"
	print EW

	#Ajusto las 4 gaussianas
	#Ventana de datos para ajustar las 3 lineas
	Pini4 = P0 - 25
	Pfin4 = P0 + 30
	spect1v4= spect1[Pini4:Pfin4]

	lamb0v4 = Pini4*salto + lamb00
	lambfv4 = Pfin4*salto + lamb00
	difv4 = Pfin4-Pini4 #Ventana espectro
	lambv4 = np.linspace(lamb0v4, lambfv4, num=difv4)

	print (x0 - lamb00)/salto
	print "Ventana considerada para Halpha y los N"

	print lamb0v4
	print lambfv4

	param_bounds=([0,-np.inf,0,-np.inf,0,-np.inf,0,15.0,-np.inf],[np.inf,np.inf,np.inf,np.inf,np.inf,np.inf,np.inf,np.inf,np.inf])

	(A1, B1, A2, B2, A3, B3, A4, B4, C4), pcov = curve_fit(gauss4, lambv4, spect1v4,bounds=param_bounds)

	print "Parametros del fit"
	print (A1, B1, A2, B2, A3, B3, A4, B4, C4)

	ajA4=A1 * np.exp(-(lambv4-x0)**2/(2.0*B1))
	ajB4=A2 * np.exp(-(lambv4-(x0-15))**2/(2.0*B2))
	ajC4=A3 * np.exp(-(lambv4-(x0+21))**2/(2.0*B3))
	ajD4=A4 * np.exp(-(lambv4-(x0-7))**2/(2.0*B4))
	ajuste4= ajA4 + ajB4 + ajC4 + ajD4 + C4

	if A4>=A3:
		print "-----------------------"
		print "There is SN emission."
		print "Position: ( m , n )=(",m,",",n,")"
		fig1=plt.figure(num=1,figsize=(8,5))
		plt.plot(lambv4, spect1v4, label='Spectra')
		plt.plot(lambv4, ajuste4, label='Gaussian')
		#plt.plot(gaussiana(lambv1,6606,1.0,1.0,0.23))
		plt.xlabel('Wavelength')
		plt.ylabel('Flux')
		plt.title('NGC 2906 (Ha-N fitting 4 Gaussians)')
		plt.legend(loc=2)
		plt.savefig('NGC2906spectraHaNGaussiana4check')
		plt.show()
		plt.close()
		return (m,n,x0,A1, B1, A2, B2, A3, B3, A4, B4, C4)
	else:
		print "-----------------------"
		print "I am not sure if there is SN emission. Probably not."
		print "Position: ( m , n )=(",m,",",n,")"

	

